# 워크 플로우 이름
name: Java CI with Gradle

# 워크 플로우가 언제 실행 될지를 정한다.
on:
  push:
    branches: [ "dev" ]

# 워크 플로우가 깃 레포에 대한 권한을 읽기 만 가능하게 설정한다.
permissions:
  contents: read

# 워크플로우에서 할 작업 정의한다.
jobs:

  # 작업 환경 = 우분투 최신 버전
  build:
    runs-on: ubuntu-latest

    # 깃허브에서 제공하는 checkout 엑션 사용
    steps:
    - uses: actions/checkout@v3

    # JDK 17 설정
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # gradle wrapper 파일에 실행 권한을 부여
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # Gradle 빌드 엑션을 이용해서 프로젝트 빌드
    - name: Build with Gradle
      uses: gradle/gradle-build-action@v2.6.0
      with:
        arguments: build

    - name: List build artifacts
      run: ls -al build/libs

    # 빌드해서 생긴 JAR 파일을 깃허브 아티팩트로 업로드
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: yeosuroServer
        path: build/libs/yeosuro-snap.jar

  # 배포 작업
  deploy:
    needs: build
    runs-on: ubuntu-latest

    # 위의 빌드 작업한 JAR 파일을 다운로드
    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: yeosuroServer
        path: build/libs/

    # EC2에 배포
    - name: Deploy to EC2
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
        chmod 600 private_key.pem
        scp -i private_key.pem -P 2222 -o StrictHostKeyChecking=no build/libs/yeosuro-snap.jar ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USERNAME }}/yeosurodev/snap.jar
        ssh -i private_key.pem -p 2222 -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'

        # Ensure PM2 is available
        if ! command -v pm2 &> /dev/null
        then
          echo "PM2 is not installed, installing now..."
          . /home/${{ secrets.EC2_USERNAME }}/.nvm/nvm.sh
          npm install -g pm2
        fi

        pm2 stop 0 || echo "No PM2 process running with ID 0"
        pm2 start /home/${{ secrets.EC2_USERNAME }}/server.json
        EOF
        
        # Clean up
        rm -f private_key.pem
